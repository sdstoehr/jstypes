---
title: Truth and equality in JavaScript
base_url: ./
meta_image: downloads/table-equals.jpg
---

{{> cta-quiz }}

<div class="content">
    <div class="inner-container">

        <h2>Truth and equality in JavaScript</h2>

        <p>
            When comparing values in JavaScript you have to know about <strong class="kw">implicit coercion</strong>.
            Otherwise you may be surprised by unexpected results.<br />
            JavaScript automatically converts a value's data type &ndash; this is called <strong class="kw">coercion</strong>.
            When you know the rules, you can use this concept as a powerful feature. If you don't, this is a major pitfall.
        </p>

        <p>
            JavaScript knows two different equality operators:
        </p>

        <ul>
            <li><a href="{{ base_url }}equals-operator/" title="Equals operator - Comparison Table" class="nolink">the equals operator: <code>==</code></a></li>
            <li><a href="{{ base_url }}strict-equals-operator/" title="Strict equals operator - Comparison Table" class="nolink">the <em>strict</em> equals operator: <code>===</code></a></li>
        </ul>

        <p>They differ in how they treat values of different data types.</p>

        <h3 id="equals"><a href="{{ base_url }}equals-operator/" title="Equals operator - Comparison Table" class="nolink">Equals operator: <code>==</code></a></h3>

        <p>
            The equals operator uses the <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3" title="ECMAScript Specification: Abstract Equality Comparison Algorithm" rel="external">
            Abstract Equality Comparison Algorithm</a> to compare two values. The algorithm specifies, how values of different types are converted before comparing them.
            <strong>So the equals operator makes use of implicit coercion!</strong>
        </p>

        <div class="cta">
            <a href="{{ base_url }}equals-operator/" title="Equals operator - Comparison Table" class="btn btn-small">View <code>==</code> comparison table</a>
        </div>

        <h3 id="strictequals"><a href="{{ base_url }}strict-equals-operator/" title="Strict equals operator - Comparison Table" class="nolink"><em>Strict</em> equals operator: <code>===</code></a></h3>

        <p>
            The strict equals operator uses the <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6" title="ECMAScript Specification: Strict Equality Comparison Algorithm" rel="external">
            Strict Equality Comparison Algorithm</a>. If the types of the compared values differ, the result of the comparison is always false.
            <strong>There is no implicit coercion taking place!</strong>
        </p>

        <div class="cta">
            <a href="{{ base_url }}strict-equals-operator/" title="Strict equals operator - Comparison Table" class="btn btn-small">View <code>===</code> comparison table</a>
        </div>

        <h3>Which one should I use?</h3>

        <p>
            There is no right and wrong. Both <code>==</code> and <code>===</code> can be useful.<br />
            Whenever possible I would use the strict equals operator (<code>===</code>),
            because its behaviour is much more reasonable for developers, who aren't used to JavaScript's coercion.

            Tools like <a href="http://www.jslint.com/" rel="external" title="JSLint">JSLint</a> or <a href="http://www.jshint.com/" rel="external" title="JSHint">JSHint</a>
            can be configured to check the use of equals/strict equals operators in your code base.
        </p>

    </div>
</div>

